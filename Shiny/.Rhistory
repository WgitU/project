install.packages("shinydashboard")
library(shiny); runApp('apptest.R')
# Define server logic required to draw a histogram
shinyServer(function(input, output){
BICvalue <- c(379599.7, 392696.1, 386628.4, 393845)
Kvalue <- c(1,2,3,4)
BICdata <- as.data.frame(cbind(Kvalue, BICvalue))
output$PlotBIC <- renderPlotly({
# generate bins based on input$bins from ui.R
x    <- BICdata[, 1:input$K]
plot_ly(data = BICdata, x = ~as.factor(Kvalue), y = ~BICvalue, mode = 'lines+markers',type = 'scatter')%>%
layout(
# title = "BIC values",
xaxis = list(title = "K"),
yaxis = list(title = "BIC"))
})
})
BICvalue <- c(379599.7, 392696.1, 386628.4, 393845)
source('C:/Users/WU/Desktop/高级应用统计/report/R___analysis/git_report/Shiny/apptest.R', echo=TRUE)
setwd("C:/Users/WU/Desktop/高级应用统计/report/R___analysis/git_report/Shiny")
setwd("app")
library(shiny)
library(shinydashboard)
library(plotly)
runApp("~/app")
setwd("C:/Users/WU/Desktop/高级应用统计/report/R___analysis/git_report/Shiny")
runApp("~/app")
runApp("~/app")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
BICvalue <- c(379599.7, 392696.1, 386628.4, 393845)
Kvalue <- c(1,2,3,4)
BICdata <- as.data.frame(cbind(Kvalue, BICvalue))
BICinp <- BICdata[, 1:input$K]
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/WU/Desktop/高级应用统计/report/R___analysis/git_report/Shiny")
runApp()
runApp()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp()
runApp()
runApp()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp()
runApp()
runApp()
shiny::runApp()
rm(list=ls())
#multiple cells and multiple subjects
#set seed to reproduce results
set.seed(8)
#subject number
m <- 60
#subject cluster number
L_true <- 3
#the cell type number
K_true <- 4
#the cell number for each subject
n_cell <- sample(50:80, m, replace = TRUE)
total_cell_num <- sum(n_cell)
#the gene number
G <- 10000
#subject cluster proportion
phi <- c(0.4, 0.3, 0.3)
S <- c(rep(1, m*phi[1]), rep(2, m*phi[2]), rep(3, m*phi[3]))
#cell-type and subject-cluster proportion matrix
Pi <- matrix(c(0.2, 0.3, 0.3, 0.2,
0.4, 0.2, 0.3, 0.1,
0.3, 0.1, 0.3, 0.3), K_true, L_true)
NDE_mu <- rnorm(7*G/10, mean=5, sd=0.2)
#change mu
mu <- cbind(
c(rnorm(3*G/10, mean=rep(c(2,2,5), each = G/10), sd=0.2), NDE_mu),
c(rnorm(3*G/10, mean=rep(c(6,1,5), each = G/10), sd=0.2), NDE_mu),
c(rnorm(3*G/10, mean=rep(c(3,5,5), each = G/10), sd=0.2), NDE_mu),
c(rnorm(3*G/10, mean=rep(c(6,4,5), each = G/10), sd=0.2), NDE_mu)
)
# Di<-dist(t(mu),diag = T)
# Di
# mean(Di[-which.min(Di)])-2*sd(Di[-which.min(Di)])
#subject-cluster-specific mean
#subject-effects center at zero
#subject cluster 1 effects are fixed at one for identifiability
subject_effect <- matrix(0, G, L_true)
ind_eff2 <- (1801):(2800)
subject_effect[ind_eff2, 2] <- rnorm(length(ind_eff2), mean=2, sd=0.2)
ind_eff3 <- (4*G/10+1):(5*G/10)
subject_effect[ind_eff3, 3] <- rnorm(length(ind_eff3), mean=2, sd=0.2)
# Ds <- dist(t(subject_effect), diag = T)
# Ds
# mean(Ds[-which.min(Ds)])-2*sd(Ds[-which.min(Ds)])
# quantile(Ds[-which.min(Ds)],c(0.025))
#normal sd
sigma <- rnorm(G, mean=1, sd=0.2)
#the lambda0 when sampling x from y
lambda0 <- rnorm(G, mean=5, sd=0.1)
lambda1 <- rnorm(G, mean=-1, sd=0.1)
#Scaling factor
scale_factor <- rnorm(sum(n_cell), mean = 1, sd = 0.1)
#cell class membership
clas_cell <- NULL
for(j in 1:m){
clas_cell <- c(clas_cell, sample(1:K_true, n_cell[j], replace=TRUE, prob=Pi[,S[j]]))
}
ind_stat_cell <- c(1, 1+cumsum(n_cell))
ind_stat_cell <- ind_stat_cell[1:m]
#theta from the normal distribution
theta <- matrix(NA, G, total_cell_num)
# S_vec <- NULL
for(i in 1:total_cell_num){
k <- clas_cell[i]
j <- sum(i >= ind_stat_cell)
# S_vec <- c(S_vec, j)
theta[, i] <- rnorm(G, mean=mu[,k]+subject_effect[,S[j]], sd=sigma)
}
#Y from Poisson-LogNormal
Y <- matrix(NA, G, total_cell_num)
for(i in 1:total_cell_num){
Y[, i] <- rpois(G, lambda=scale_factor[i] * exp(theta[,i]))
}
#sample X
X <- matrix(NA, G, total_cell_num)
for(i in 1:total_cell_num){
tmp <- exp(lambda0 + lambda1 * log2(Y[ ,i]+1))
tmp <- tmp/(1 + tmp)
X[, i] <- Y[, i]
r <- runif(G)
X[r <= tmp, i] <- 0
}
library("Seurat")
set.seed(123)
cm <- CreateSeuratObject(raw.data = as.data.frame(log2(X+1)),project = "cm")
# cm <- NormalizeData(object = cm)
# cm <- FindVariableGenes(object = cm)
cm <- ScaleData(object = cm)
cm <-RunPCA(object = cm, pc.genes = rownames(cm@data))
# PCAPlot(cm)
cm <- FindClusters(object = cm, reduction.type = "pca", dims.use = 1:9, resolution = 0.6, save.SNN = TRUE)
library(aricode)
ARI(cm@ident, clas_cell)
##kmeans
library(factoextra)
set.seed(123)
cellmatrix<-log2(X+1)
# fviz_nbclust(t(cellmatrix), kmeans, method = "wss",k.max=6)
km_result <- kmeans(t(cellmatrix), 4)
ARI(km_result$cluster,clas_cell)
#Subject matrix
subjectmatrix <- NULL
for (j in 1:m) {
subjectmatrix <- cbind(subjectmatrix,apply(log(X[, ind_stat_cell[j]:(ind_stat_cell[j]+n_cell[j]-1)]+1),1,mean))
}
library(factoextra)
df<-t(subjectmatrix)
set.seed(123)
fviz_nbclust(df, kmeans, method = "wss",k.max=10)
# + geom_vline(xintercept = 2, linetype = 2)
set.seed(123)
km_result <- kmeans(df, 4)
# fviz_cluster(km_result, data = df,
#              ellipse = F,
#              show.clust.cent = F,
#              shape = 1,
#              repel = F,
#              ggtheme = theme_grey()
# )
# library(aricode)
ARI(km_result$cluster,S)
library(sparcl)
set.seed(123)
km.perm <- KMeansSparseCluster.permute(df,K=4,wbounds=seq(3,7,len=15),nperms=5)
# print(km.perm)
# plot(km.perm)
km.out <- KMeansSparseCluster(df,K=4,wbounds=km.perm$bestw)
ARI(km.out[[1]]$Cs,S)
##biclust
library(biclust)
set.seed(123)
# bi <- biclust(discretize(df), method=BCXmotifs(), ns=20, nd=20, sd=5, alpha=0.01, number=10)
# bi <- biclust(df, method=BCSpectral(), numberOfEigenvalues=1)
bi1 <- biclust(df, method=BCCC(), delta=1,  alpha=0.1, number=3)
bi2 <- biclust(df, method=BCPlaid())
# writeclust(bi)
ARI(writeclust(bi1),S)
ARI(writeclust(bi2),S)
rm(list=ls())
#multiple cells and multiple subjects
#set seed to reproduce results
set.seed(7)
#subject number
m <- 60
#subject cluster number
L_true <- 3
#the cell type number
K_true <- 4
#the cell number for each subject
n_cell <- sample(50:80, m, replace = TRUE)
total_cell_num <- sum(n_cell)
#the gene number
G <- 10000
#subject cluster proportion
phi <- c(0.4, 0.3, 0.3)
S <- c(rep(1, m*phi[1]), rep(2, m*phi[2]), rep(3, m*phi[3]))
#cell-type and subject-cluster proportion matrix
Pi <- matrix(c(0.2, 0.3, 0.3, 0.2,
0.4, 0.2, 0.3, 0.1,
0.3, 0.1, 0.3, 0.3), K_true, L_true)
NDE_mu <- rnorm(7*G/10, mean=5, sd=0.2)
#change mu
mu <- cbind(
c(rnorm(3*G/10, mean=rep(c(2,2,5), each = G/10), sd=0.2), NDE_mu),
c(rnorm(3*G/10, mean=rep(c(6,1,5), each = G/10), sd=0.2), NDE_mu),
c(rnorm(3*G/10, mean=rep(c(3,5,5), each = G/10), sd=0.2), NDE_mu),
c(rnorm(3*G/10, mean=rep(c(6,4,5), each = G/10), sd=0.2), NDE_mu)
)
# Di<-dist(t(mu),diag = T)
# Di
# mean(Di[-which.min(Di)])-2*sd(Di[-which.min(Di)])
#subject-cluster-specific mean
#subject-effects center at zero
#subject cluster 1 effects are fixed at one for identifiability
subject_effect <- matrix(0, G, L_true)
ind_eff2 <- (1801):(2800)
subject_effect[ind_eff2, 2] <- rnorm(length(ind_eff2), mean=2, sd=0.2)
ind_eff3 <- (4*G/10+1):(5*G/10)
subject_effect[ind_eff3, 3] <- rnorm(length(ind_eff3), mean=2, sd=0.2)
# Ds <- dist(t(subject_effect), diag = T)
# Ds
# mean(Ds[-which.min(Ds)])-2*sd(Ds[-which.min(Ds)])
# quantile(Ds[-which.min(Ds)],c(0.025))
#normal sd
sigma <- rnorm(G, mean=1, sd=0.2)
#the lambda0 when sampling x from y
lambda0 <- rnorm(G, mean=5, sd=0.1)
lambda1 <- rnorm(G, mean=-1, sd=0.1)
#Scaling factor
scale_factor <- rnorm(sum(n_cell), mean = 1, sd = 0.1)
#cell class membership
clas_cell <- NULL
for(j in 1:m){
clas_cell <- c(clas_cell, sample(1:K_true, n_cell[j], replace=TRUE, prob=Pi[,S[j]]))
}
ind_stat_cell <- c(1, 1+cumsum(n_cell))
ind_stat_cell <- ind_stat_cell[1:m]
#theta from the normal distribution
theta <- matrix(NA, G, total_cell_num)
# S_vec <- NULL
for(i in 1:total_cell_num){
k <- clas_cell[i]
j <- sum(i >= ind_stat_cell)
# S_vec <- c(S_vec, j)
theta[, i] <- rnorm(G, mean=mu[,k]+subject_effect[,S[j]], sd=sigma)
}
#Y from Poisson-LogNormal
Y <- matrix(NA, G, total_cell_num)
for(i in 1:total_cell_num){
Y[, i] <- rpois(G, lambda=scale_factor[i] * exp(theta[,i]))
}
#sample X
X <- matrix(NA, G, total_cell_num)
for(i in 1:total_cell_num){
tmp <- exp(lambda0 + lambda1 * log2(Y[ ,i]+1))
tmp <- tmp/(1 + tmp)
X[, i] <- Y[, i]
r <- runif(G)
X[r <= tmp, i] <- 0
}
library("Seurat")
set.seed(123)
cm <- CreateSeuratObject(raw.data = as.data.frame(log2(X+1)),project = "cm")
# cm <- NormalizeData(object = cm)
# cm <- FindVariableGenes(object = cm)
cm <- ScaleData(object = cm)
cm <-RunPCA(object = cm, pc.genes = rownames(cm@data))
# PCAPlot(cm)
cm <- FindClusters(object = cm, reduction.type = "pca", dims.use = 1:9, resolution = 0.6, save.SNN = TRUE)
library(aricode)
ARI(cm@ident, clas_cell)
##kmeans
library(factoextra)
set.seed(123)
cellmatrix<-log2(X+1)
# fviz_nbclust(t(cellmatrix), kmeans, method = "wss",k.max=6)
km_result <- kmeans(t(cellmatrix), 4)
ARI(km_result$cluster,clas_cell)
#Subject matrix
subjectmatrix <- NULL
for (j in 1:m) {
subjectmatrix <- cbind(subjectmatrix,apply(log(X[, ind_stat_cell[j]:(ind_stat_cell[j]+n_cell[j]-1)]+1),1,mean))
}
library(factoextra)
df<-t(subjectmatrix)
set.seed(123)
fviz_nbclust(df, kmeans, method = "wss",k.max=10)
# + geom_vline(xintercept = 2, linetype = 2)
set.seed(123)
km_result <- kmeans(df, 4)
# fviz_cluster(km_result, data = df,
#              ellipse = F,
#              show.clust.cent = F,
#              shape = 1,
#              repel = F,
#              ggtheme = theme_grey()
# )
# library(aricode)
ARI(km_result$cluster,S)
library(sparcl)
set.seed(123)
km.perm <- KMeansSparseCluster.permute(df,K=4,wbounds=seq(3,7,len=15),nperms=5)
# print(km.perm)
# plot(km.perm)
km.out <- KMeansSparseCluster(df,K=4,wbounds=km.perm$bestw)
ARI(km.out[[1]]$Cs,S)
##biclust
library(biclust)
set.seed(123)
# bi <- biclust(discretize(df), method=BCXmotifs(), ns=20, nd=20, sd=5, alpha=0.01, number=10)
# bi <- biclust(df, method=BCSpectral(), numberOfEigenvalues=1)
bi1 <- biclust(df, method=BCCC(), delta=1,  alpha=0.1, number=3)
# writeclust(bi)
ARI(writeclust(bi1),S)
bi2 <- biclust(df, method=BCPlaid())
ARI(writeclust(bi2),S)
